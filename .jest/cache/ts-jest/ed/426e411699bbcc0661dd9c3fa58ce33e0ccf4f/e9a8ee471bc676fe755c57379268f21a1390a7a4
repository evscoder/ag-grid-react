[["E:\\Projects\\ag-grid-react\\src\\Redux\\fetchUsers.test.tsx",{"fileContent":"import {render} from '@testing-library/react';\r\nimport '@testing-library/jest-dom';\r\nimport '@testing-library/jest-dom/extend-expect';\r\nimport store from './store';\r\nimport {Provider} from \"react-redux\";\r\nimport App from \"../App\";\r\n\r\ntest(\"should fetch and display asynchronous posts\", () => {\r\n    const { getByTestId } = render(\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    );\r\n\r\n    const table = getByTestId('table');\r\n    expect(table.textContent).toBe('1');\r\n});\r\n","resolvedModuleNames":["E:/Projects/ag-grid-react/src/Redux/store.tsx","E:/Projects/ag-grid-react/src/App.tsx","E:/Projects/ag-grid-react/src/Redux/userSlice.tsx","E:/Projects/ag-grid-react/src/Components/Table/Table.tsx"]}],["E:\\Projects\\ag-grid-react\\src\\Redux\\store.tsx",{"fileContent":"import { configureStore } from '@reduxjs/toolkit';\r\nimport userSlice from './userSlice';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        userSlice\r\n    }\r\n});\r\n\r\nexport default store;\r\n\r\n","resolvedModuleNames":["E:/Projects/ag-grid-react/src/Redux/userSlice.tsx"]}],["E:\\Projects\\ag-grid-react\\src\\Redux\\userSlice.tsx",{"fileContent":"import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    users: [],\r\n    loading: null,\r\n    error: ''\r\n};\r\n\r\nconst BASE_URL = \"https://jsonplaceholder.typicode.com\";\r\nconst fetchUsers = createAsyncThunk('userSlice/fetchUsers',\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    async (params: any, { rejectWithValue }) => {\r\n        try {\r\n            const response = await fetch(`${BASE_URL}/posts`);\r\n\r\n            if (!response.ok) {\r\n                throw new Error();\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data.slice(0, 6);\r\n        } catch (error) {\r\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n            // @ts-ignore\r\n            return rejectWithValue(error?.message);\r\n        }\r\n    }\r\n);\r\n\r\nconst userSlice = createSlice({\r\n    name: 'userSlice',\r\n    initialState,\r\n    reducers: {\r\n    },\r\n    extraReducers: (builder: any) => {\r\n        builder.addCase(fetchUsers.pending, (state: any) => {\r\n            state.loading = true;\r\n        }),\r\n        builder.addCase(fetchUsers.fulfilled, (state: any, action: any) => {\r\n            state.loading = false;\r\n            state.users = action.payload;\r\n            state.error = '';\r\n        }),\r\n        builder.addCase(fetchUsers.rejected, (state: any, action: any) => {\r\n            state.loading = false;\r\n            state.users = [];\r\n            state.error = action.error.message;\r\n        })\r\n    }\r\n});\r\n\r\nexport { fetchUsers };\r\nexport default userSlice.reducer;\r\n","resolvedModuleNames":[]}],["E:\\Projects\\ag-grid-react\\src\\App.tsx",{"fileContent":"import './App.css';\n// import Table from \"./Components/Table/Table\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useEffect} from \"react\";\nimport {fetchUsers} from \"./Redux/userSlice\";\nimport Table from \"./Components/Table/Table\";\nfunction App() {\n    const user = useSelector((state: any) => state.userSlice);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        dispatch(fetchUsers());\n    },[]);\n    return (\n        <div>\n            {!user.loading && <Table users={user.users} />}\n        </div>\n    );\n\n}\n\nexport default App\n","resolvedModuleNames":["E:/Projects/ag-grid-react/src/Redux/userSlice.tsx","E:/Projects/ag-grid-react/src/Components/Table/Table.tsx","E:/Projects/ag-grid-react/src/Components/Modal/Modal.tsx"]}],["E:\\Projects\\ag-grid-react\\src\\Components\\Table\\Table.tsx",{"fileContent":"import {FC, useRef, useState} from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-alpine.css\";\r\nimport styles from './Table.module.css';\r\nimport Modal from \"../Modal/Modal\";\r\n\r\nconst Table: FC<any> = ({ users }) => {\r\n    const [rowData, setRowData] = useState<any>(users);\r\n    const [isModal, setIsModal] = useState<boolean>(false);\r\n    const [columnDefs] = useState<any>([\r\n        { field: 'id' },\r\n        { field: 'title' },\r\n        { field: 'body' }\r\n    ]);\r\n    const gridRef = useRef<any>(null);\r\n    const inputTitleRef = useRef<any>(null);\r\n    const inputTextRef = useRef<any>(null);\r\n\r\n    const onToggleModalDelete = () => {\r\n        setIsModal(true);\r\n    };\r\n\r\n    const onRemove = () => {\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n        // @ts-ignore\r\n        const selectedNodes = gridRef.current?.api.getSelectedNodes();\r\n        const selectedId = selectedNodes.map((item: any) => item.data.id);\r\n        const newUsers = rowData.filter((user: any) => selectedId.indexOf(user.id) < 0);\r\n\r\n        setRowData(newUsers);\r\n        setIsModal(false);\r\n    };\r\n\r\n    const onAddRow = (event: any) => {\r\n        event.preventDefault();\r\n\r\n        const title = inputTitleRef.current;\r\n        const body = inputTextRef.current;\r\n\r\n        if (!title.value) {\r\n            return;\r\n        }\r\n\r\n        setRowData([...rowData, {\r\n            id: rowData.length + 1,\r\n            title: title.value,\r\n            body: body.value ? body.value : 'text ....'\r\n        }]);\r\n\r\n        event.currentTarget.reset();\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper} data-testid='table' >\r\n            <div className={styles.tools}>\r\n                <form className={styles.form} action=\"\" onSubmit={onAddRow}>\r\n                    <input ref={inputTitleRef} type=\"text\"/>\r\n                    <input ref={inputTextRef} type=\"text\"/>\r\n                    <button type={'submit'}>Add Row</button>\r\n                </form>\r\n                <button onClick={onToggleModalDelete}>Remove item</button>\r\n            </div>\r\n            <div className=\"ag-theme-alpine\" style={{ height: 400, width: 720 }}>\r\n                <AgGridReact\r\n                    ref={gridRef}\r\n                    rowSelection={'multiple'}\r\n                    animateRows={true}\r\n                    rowData={rowData} columnDefs={columnDefs} editType=\"fullRow\">\r\n                </AgGridReact>\r\n            </div>\r\n            {isModal &&\r\n                <Modal title={'Remove rows?'} onRemove={onRemove} setIsModal={setIsModal}/>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table;\r\n","resolvedModuleNames":["E:/Projects/ag-grid-react/src/Components/Modal/Modal.tsx"]}],["E:\\Projects\\ag-grid-react\\src\\Components\\Modal\\Modal.tsx",{"fileContent":"import styles from './Modal.module.css';\r\nimport {FC} from \"react\";\r\nconst Modal: FC<any> = ({ title, onRemove, setIsModal }) => {\r\n    const onClose = () => {\r\n        setIsModal(false);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.modal}>\r\n            <div className={styles.modalOverlay} onClick={onClose}></div>\r\n            <div className={styles.modalContent}>\r\n                <h2 className={styles.title}>{ title }</h2>\r\n                <div className={styles.footer}>\r\n                    <button className={styles.buttonCancel} onClick={onClose}>Cancel</button>\r\n                    <button className={styles.buttonOk} onClick={onRemove}>Ok</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","resolvedModuleNames":[]}],["E:\\Projects\\ag-grid-react\\jestSetupFile.ts",{"fileContent":"import { TextEncoder } from 'util';\r\n\r\nObject.defineProperty(window, 'TextEncoder', {\r\n    writable: true,\r\n    value: TextEncoder,\r\n});\r\n","resolvedModuleNames":[]}]]